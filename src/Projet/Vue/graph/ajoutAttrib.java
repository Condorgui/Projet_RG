/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Projet.Vue.graph;

import Projet.Metier.Classe;
import Projet.Metier.Enseignant;
import Projet.Metier.Attribution;
import Projet.Modele.ClasseModele;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;

/**
 *
 * @author Guillaume.Rigaux
 */
public class ajoutAttrib extends javax.swing.JPanel {

    /**
     *
     */
    public List<Enseignant> enseignants;

    /**
     *
     */
    public List<Classe> classes;

    /**
     *
     */
    public List<Attribution> attributions;

    private ClasseModele cm;

    /**
     * Setter du modèle
     *
     * @param cm le modèle à set
     */
    public void setModele(ClasseModele cm) {

        this.cm = cm;
    }

    /**
     *
     */
    public ajoutAttrib() {

        initComponents();
        Color font = new Color(247, 223, 154);
        Color b = new Color(147, 216, 136);
        Color a = new Color(247, 104, 104);
        this.setBackground(font);
        ajoutAttrib.setBackground(b);
        bAnnuler.setBackground(a);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        listEns = new javax.swing.JComboBox<>();
        btnTitu = new javax.swing.JCheckBox();
        btnRemp = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        listClasse = new javax.swing.JComboBox<>();
        ajoutAttrib = new javax.swing.JButton();
        bAnnuler = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setLayout(new java.awt.GridLayout(4, 5, 2, 8));

        jLabel2.setText("Liste des enseignants disponibles");
        add(jLabel2);

        add(listEns);

        btnTitu.setText("Titulaire");
        btnTitu.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btnTituStateChanged(evt);
            }
        });
        btnTitu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTituActionPerformed(evt);
            }
        });
        add(btnTitu);

        btnRemp.setText("Remplacant");
        btnRemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRempActionPerformed(evt);
            }
        });
        add(btnRemp);

        jLabel3.setText("Liste des classes");
        add(jLabel3);

        add(listClasse);

        ajoutAttrib.setText("Ajouter");
        ajoutAttrib.setToolTipText("");
        ajoutAttrib.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ajoutAttribMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ajoutAttribMouseExited(evt);
            }
        });
        ajoutAttrib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutAttribActionPerformed(evt);
            }
        });
        add(ajoutAttrib);

        bAnnuler.setText("Annuler");
        bAnnuler.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bAnnulerMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bAnnulerMouseExited(evt);
            }
        });
        add(bAnnuler);
    }// </editor-fold>//GEN-END:initComponents

    private void ajoutAttribActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutAttribActionPerformed

        Object ens = listEns.getSelectedItem();
        Enseignant enseignant = cm.getEnseignant((Enseignant) ens);
        Object cla = listClasse.getSelectedItem();
        Classe classe = cm.getClasse((Classe) cla);

        /*Modèle de la vue 
        if ((e.getTitulaire() != null || e.getRemplacant() != null)) {
                affichageMessage("Cet enseignant est déjà titulaire ou remplacant");
                return null;
            } else {
                if (chA == 1) {
                    for (Attribution a : toutesLesAttributions) {
                        Enseignant eAtt = a.getEnseignant();
                        if (eAtt.getTitulaire() != null) {
                            if (eAtt.getTitulaire().equals(c)) {
                                affichageMessage("Il y a déjà un titulaire attitré");
                                return null;
                            }
                        }
                        if (eAtt.equals(e) && !eAtt.getMatricule().equals(e.getMatricule())) {
                            return null;
                        }

                    }
                    e.setTitulaire(c);
                } else if (chA == 2) {
                    for (Attribution a : toutesLesAttributions) {
                        Enseignant eAtt = a.getEnseignant();
                        if (eAtt == e && !eAtt.getMatricule().equals(e.getMatricule())) {
                            return null;
                        }
                    }
                    e.setRemplacant(c);
                }
            }
            Attribution a = new Attribution(c, e);

         */
        boolean error = false;

        if (btnTitu.isSelected()) {

            for (Attribution a : attributions) {
                Enseignant eAtt = a.getEnseignant();
                if (enseignant.getRemplacant() != null) {
                    error = true;
                    JOptionPane.showMessageDialog(this, "Un enseignant ne peut être que titulaire ou remplaçant", "Titulaire", JOptionPane.ERROR_MESSAGE);

                }
                if (eAtt.getTitulaire() != null) {
                    if (eAtt.getTitulaire().equals(classe)) {
                        error = true;
                        JOptionPane.showMessageDialog(this, "Il y a déjà un titulaire attitré", "Titulaire", JOptionPane.ERROR_MESSAGE);
                    }
                }
                if (eAtt.equals(enseignant) && !eAtt.getMatricule().equals(enseignant.getMatricule())) {
                    error = true;
                    JOptionPane.showMessageDialog(this, "Il y a déjà un titulaire attitré", "Titulaire", JOptionPane.ERROR_MESSAGE);
                }

            }
            if (!error) {
                enseignant.setTitulaire(classe);
                enseignant.setRemplacant(null);
            }
        } else if (btnRemp.isSelected()) {

            if (enseignant.getRemplacant() != null) {
                error = true;
                JOptionPane.showMessageDialog(this, "Un enseignant ne peut être remplaçant que d'une classe", "Remplaçant", JOptionPane.ERROR_MESSAGE);

            } else {
                enseignant.setRemplacant(classe);
            }
        }
        if (!btnTitu.isSelected() && !btnRemp.isSelected()) {

            error = true;
            JOptionPane.showMessageDialog(this, "Sélectionnez titulaire ou remplacant", "Erreur", JOptionPane.ERROR_MESSAGE);

        }
        if (!error) {
            Attribution a = new Attribution(classe, enseignant);
            cm.ajouterAttribution(a);
            JOptionPane.showMessageDialog(this, "Attribution ajoutée", "Succès", JOptionPane.INFORMATION_MESSAGE
            );
        }
        initPanel();

    }//GEN-LAST:event_ajoutAttribActionPerformed

    private void btnTituActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTituActionPerformed


    }//GEN-LAST:event_btnTituActionPerformed

    private void btnTituStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btnTituStateChanged

    }//GEN-LAST:event_btnTituStateChanged

    private void btnRempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRempActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRempActionPerformed

    private void ajoutAttribMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ajoutAttribMouseEntered
        Color b = new Color(138, 254, 71);
        ajoutAttrib.setBackground(b);
    }//GEN-LAST:event_ajoutAttribMouseEntered

    private void ajoutAttribMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ajoutAttribMouseExited
        Color b = new Color(147, 216, 136);
        ajoutAttrib.setBackground(b);
    }//GEN-LAST:event_ajoutAttribMouseExited

    private void bAnnulerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bAnnulerMouseEntered

        Color a = new Color(243, 49, 49);
        bAnnuler.setBackground(a);
    }//GEN-LAST:event_bAnnulerMouseEntered

    private void bAnnulerMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bAnnulerMouseExited
        Color a = new Color(247, 104, 104);
        bAnnuler.setBackground(a);
    }//GEN-LAST:event_bAnnulerMouseExited

    /**
     *
     */
    public void initPanel() {

        classes = new ArrayList<>(cm.toutesClasses());
        enseignants = new ArrayList<>(cm.tousEns());
        attributions = new ArrayList<>(cm.toutesLesAttributions());
        ButtonGroup group = new ButtonGroup();
        group.add(btnRemp);
        group.add(btnTitu);
        listEns.removeAllItems();
        listClasse.removeAllItems();

        /*for(Enseignant e : enseignants){
            if(e.getTitulaire() == null && e.getRemplacant() == null){
                listEns.addItem(e);
            }
            
        }*/
        enseignants.forEach((Enseignant e) -> {
            if (e.getTitulaire() == null && e.getRemplacant() == null) {
                listEns.addItem(e);
            }
        });

        classes.forEach((c) -> {

            listClasse.addItem(c);
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ajoutAttrib;
    private javax.swing.JButton bAnnuler;
    private javax.swing.JCheckBox btnRemp;
    private javax.swing.JCheckBox btnTitu;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox<Classe> listClasse;
    private javax.swing.JComboBox<Enseignant> listEns;
    // End of variables declaration//GEN-END:variables
}
